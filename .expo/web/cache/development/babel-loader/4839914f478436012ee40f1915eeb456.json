{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport InlineTextButton from \"../components/InlineTextButton\";\nimport AppStyles from \"../styles/AppStyles\";\nimport { auth, db } from \"../firebase\";\nimport { collection, addDoc, query, where, getDocs, deleteDoc, doc, setDoc } from \"firebase/firestore\";\nimport { sendEmailVerification } from 'firebase/auth';\nimport React from 'react';\nimport AddToDoModal from \"../components/AddToDoModal\";\nimport BouncyCheckbox from 'react-native-bouncy-checkbox';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ToDo(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      modalVisible = _React$useState2[0],\n      setModalVisible = _React$useState2[1];\n\n  var _React$useState3 = React.useState(true),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isLoading = _React$useState4[0],\n      setIsLoading = _React$useState4[1];\n\n  var _React$useState5 = React.useState(false),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      isRefreshing = _React$useState6[0],\n      setIsRefreshing = _React$useState6[1];\n\n  var _React$useState7 = React.useState([]),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      toDos = _React$useState8[0],\n      setToDos = _React$useState8[1];\n\n  var loadToDoList = function loadToDoList() {\n    var q, querySnapshot, toDos;\n    return _regeneratorRuntime.async(function loadToDoList$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            q = query(collection(db, \"todos\"), where(\"userId\", \"==\", auth.currentUser.uid));\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(getDocs(q));\n\n          case 3:\n            querySnapshot = _context.sent;\n            toDos = [];\n            querySnapshot.forEach(function (doc) {\n              var toDo = doc.data();\n              toDo.id = doc.id;\n              toDos.push(toDo);\n            });\n            setToDos(toDos);\n            setIsLoading(false);\n            setIsRefreshing(false);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (isLoading) {\n    loadToDoList();\n  }\n\n  var checkToDoItem = function checkToDoItem(item, isChecked) {\n    var toDoRef = doc(db, 'todos', item.id);\n    setDoc(toDoRef, {\n      completed: isChecked\n    }, {\n      merge: true\n    });\n  };\n\n  var deleteToDo = function deleteToDo(toDoId) {\n    var updatedToDos;\n    return _regeneratorRuntime.async(function deleteToDo$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(deleteDoc(doc(db, \"todos\", toDoId)));\n\n          case 2:\n            updatedToDos = _toConsumableArray(toDos).filter(function (item) {\n              return item.id != toDoId;\n            });\n            setToDos(updatedToDos);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var renderToDoItem = function renderToDoItem(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(View, {\n      style: [AppStyles.rowContainer, AppStyles.rightMargin, AppStyles.leftMargin],\n      children: [_jsx(View, {\n        style: AppStyles.fillSpace,\n        children: _jsx(BouncyCheckbox, {\n          isChecked: item.complated,\n          size: 25,\n          fillColor: \"#258ea6\",\n          unfillColor: \"#FFFFFF\",\n          text: item.text,\n          iconStyle: {\n            borderColor: \"#258ea6\"\n          },\n          onPress: function onPress(isChecked) {\n            checkToDoItem(item, isChecked);\n          }\n        })\n      }), _jsx(InlineTextButton, {\n        text: \"Delete\",\n        color: \"#258ea6\",\n        onPress: function onPress() {\n          return deleteToDo(item.id);\n        }\n      })]\n    });\n  };\n\n  var showToDoList = function showToDoList() {\n    return _jsx(FlatList, {\n      data: toDos,\n      refreshing: isRefreshing,\n      onRefresh: function onRefresh() {\n        loadToDoList();\n        setIsRefreshing(true);\n      },\n      renderItem: renderToDoItem,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      }\n    });\n  };\n\n  var showContent = function showContent() {\n    return _jsxs(View, {\n      children: [isLoading ? _jsx(ActivityIndicator, {\n        size: \"large\"\n      }) : showToDoList(), _jsx(Button, {\n        title: \"Add ToDo\",\n        onPress: function onPress() {\n          return setModalVisible(true);\n        },\n        color: \"#fb4d3d\"\n      })]\n    });\n  };\n\n  var showSendVerificationEmail = function showSendVerificationEmail() {\n    return _jsxs(View, {\n      children: [_jsx(Text, {\n        children: \"Please verify your email to use ToDo\"\n      }), _jsx(Button, {\n        title: \"Send Verification Email\",\n        onPress: function onPress() {\n          return sendEmailVerification(auth.currentUser);\n        }\n      })]\n    });\n  };\n\n  var addToDo = function addToDo(todo) {\n    var toDoToSave, docRef, updatedToDos;\n    return _regeneratorRuntime.async(function addToDo$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            toDoToSave = {\n              text: todo,\n              completed: false,\n              userId: auth.currentUser.uid\n            };\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(addDoc(collection(db, \"todos\"), toDoToSave));\n\n          case 3:\n            docRef = _context3.sent;\n            toDoToSave.id = docRef.id;\n            updatedToDos = _toConsumableArray(toDos);\n            updatedToDos.push(toDoToSave);\n            setToDos(updatedToDos);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(SafeAreaView, {\n    children: [_jsx(View, {\n      style: [AppStyles.rowContainer, AppStyles.rightAligned, AppStyles.rightMargin, AppStyles.topMargin],\n      children: _jsx(InlineTextButton, {\n        text: \"Manage Account\",\n        color: \"#258ea6\",\n        onPress: function onPress() {\n          return navigation.navigate(\"ManageAccount\");\n        }\n      })\n    }), _jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: modalVisible,\n      onRequestClose: function onRequestClose() {\n        return setModalVisible(false);\n      },\n      children: _jsx(AddToDoModal, {\n        onClose: function onClose() {\n          return setModalVisible(false);\n        },\n        addToDo: addToDo\n      })\n    }), _jsx(Text, {\n      style: AppStyles.header,\n      children: \"ToDo\"\n    }), auth.currentUser.emailVerified ? showContent() : showSendVerificationEmail()]\n  });\n}","map":{"version":3,"names":["InlineTextButton","AppStyles","auth","db","collection","addDoc","query","where","getDocs","deleteDoc","doc","setDoc","sendEmailVerification","React","AddToDoModal","BouncyCheckbox","ToDo","navigation","useState","modalVisible","setModalVisible","isLoading","setIsLoading","isRefreshing","setIsRefreshing","toDos","setToDos","loadToDoList","q","currentUser","uid","querySnapshot","forEach","toDo","data","id","push","checkToDoItem","item","isChecked","toDoRef","completed","merge","deleteToDo","toDoId","updatedToDos","filter","renderToDoItem","rowContainer","rightMargin","leftMargin","fillSpace","complated","text","borderColor","showToDoList","showContent","showSendVerificationEmail","addToDo","todo","toDoToSave","userId","docRef","rightAligned","topMargin","navigate","header","emailVerified"],"sources":["D:/Documentos/ToDoApp-React-Native/screens/ToDo.js"],"sourcesContent":["import { View, Button, Text, Modal, SafeAreaView, ActivityIndicator, FlatList } from 'react-native';\r\nimport InlineTextButton from '../components/InlineTextButton';\r\nimport AppStyles from '../styles/AppStyles';\r\nimport { auth, db } from \"../firebase\";\r\nimport { collection, addDoc, query, where, getDocs, deleteDoc, doc, setDoc } from \"firebase/firestore\"; \r\nimport { sendEmailVerification } from 'firebase/auth';\r\nimport React from 'react';\r\nimport AddToDoModal from '../components/AddToDoModal';\r\nimport BouncyCheckbox from 'react-native-bouncy-checkbox';\r\n\r\nexport default function ToDo({ navigation }) {\r\n  let [modalVisible, setModalVisible] = React.useState(false);\r\n  let [isLoading, setIsLoading] = React.useState(true);\r\n  let [isRefreshing, setIsRefreshing] = React.useState(false);\r\n  let [toDos, setToDos] = React.useState([]);\r\n\r\n  let loadToDoList = async () => {\r\n    const q = query(collection(db, \"todos\"), where(\"userId\", \"==\", auth.currentUser.uid));\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    let toDos = [];\r\n    querySnapshot.forEach((doc) => {\r\n      let toDo = doc.data();\r\n      toDo.id = doc.id;\r\n      toDos.push(toDo);\r\n    });\r\n\r\n    setToDos(toDos);\r\n    setIsLoading(false);\r\n    setIsRefreshing(false);\r\n  };\r\n\r\n  if (isLoading) {\r\n    loadToDoList();\r\n  }\r\n\r\n  let checkToDoItem = (item, isChecked) => {\r\n    const toDoRef = doc(db, 'todos', item.id);\r\n    setDoc(toDoRef, { completed: isChecked }, { merge: true });\r\n  };\r\n\r\n  let deleteToDo = async (toDoId) => {\r\n    await deleteDoc(doc(db, \"todos\", toDoId));\r\n    let updatedToDos = [...toDos].filter((item) => item.id != toDoId);\r\n    setToDos(updatedToDos);\r\n  };\r\n\r\n  let renderToDoItem = ({item}) => {\r\n    return (\r\n      <View style={[AppStyles.rowContainer, AppStyles.rightMargin, AppStyles.leftMargin]}>\r\n        <View style={AppStyles.fillSpace}>\r\n          <BouncyCheckbox\r\n            isChecked={item.complated}\r\n            size={25}\r\n            fillColor=\"#258ea6\"\r\n            unfillColor=\"#FFFFFF\"\r\n            text={item.text}\r\n            iconStyle={{ borderColor: \"#258ea6\" }}\r\n            onPress={(isChecked) => { checkToDoItem(item, isChecked)}}\r\n          />\r\n        </View>\r\n        <InlineTextButton text=\"Delete\" color=\"#258ea6\" onPress={() => deleteToDo(item.id)} />\r\n      </View>\r\n    );\r\n  }\r\n\r\n  let showToDoList = () => {\r\n    return (\r\n      <FlatList\r\n        data={toDos}\r\n        refreshing={isRefreshing}\r\n        onRefresh={() => {\r\n          loadToDoList();\r\n          setIsRefreshing(true);\r\n        }}\r\n        renderItem={renderToDoItem}\r\n        keyExtractor={item => item.id} />\r\n    )\r\n  };\r\n\r\n  let showContent = () => {\r\n    return (\r\n      <View>\r\n        {isLoading ? <ActivityIndicator size=\"large\" /> : showToDoList() }\r\n        <Button \r\n          title=\"Add ToDo\" \r\n          onPress={() => setModalVisible(true)} \r\n          color=\"#fb4d3d\" />\r\n      </View>\r\n    );\r\n  };\r\n\r\n  let showSendVerificationEmail = () => {\r\n    return (\r\n      <View>\r\n        <Text>Please verify your email to use ToDo</Text>\r\n        <Button title=\"Send Verification Email\" onPress={() => sendEmailVerification(auth.currentUser)} />\r\n      </View>\r\n    );\r\n  };\r\n\r\n  let addToDo = async (todo) => {\r\n    let toDoToSave = {\r\n      text: todo,\r\n      completed: false,\r\n      userId: auth.currentUser.uid\r\n    };\r\n    const docRef = await addDoc(collection(db, \"todos\"), toDoToSave);\r\n\r\n    toDoToSave.id = docRef.id;\r\n\r\n    let updatedToDos = [...toDos];\r\n    updatedToDos.push(toDoToSave);\r\n\r\n    setToDos(updatedToDos);\r\n  };\r\n  \r\n  return (\r\n    <SafeAreaView>\r\n      <View style={[AppStyles.rowContainer, AppStyles.rightAligned, AppStyles.rightMargin, AppStyles.topMargin]}>\r\n        <InlineTextButton text=\"Manage Account\" color=\"#258ea6\" onPress={() => navigation.navigate(\"ManageAccount\")}/>\r\n      </View>\r\n      <Modal\r\n        animationType=\"slide\"\r\n        transparent={true}\r\n        visible={modalVisible}\r\n        onRequestClose={() => setModalVisible(false)}>\r\n        <AddToDoModal \r\n          onClose={() => setModalVisible(false)}\r\n          addToDo={addToDo} />\r\n      </Modal>\r\n      <Text style={AppStyles.header}>ToDo</Text>\r\n      {auth.currentUser.emailVerified ? showContent() : showSendVerificationEmail()}\r\n    </SafeAreaView>\r\n  )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}